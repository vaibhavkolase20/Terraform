# How to Create VPC, Subnet, IGW, and EC2 using Terraform

## **Step 1: Create an EC2 Instance**

Launch an EC2 instance manually from the AWS console. This instance will be used to install and execute Terraform commands.

## **Step 2: Install Terraform on the EC2 Instance**

1. Connect to the EC2 instance using SSH:
   ```bash
   ssh -i your-key.pem ec2-user@your-ec2-public-ip
   ```
2. Update the system and install Terraform:
   ```bash
   sudo yum update -y
   sudo yum install -y yum-utils
   sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
   sudo yum install terraform -y
   ```
3. Verify Terraform installation:
   ```bash
   terraform version
4. create one IAM role and attach to your incetance 
   ```

## **Step 3: Create a Directory and Terraform Configuration File**

1. Create a new directory:
   ```bash
   mkdir demo && cd demo
   ```
2. Create a Terraform file:
   ```bash
   touch vpc.tf
   ```
3. Open `vpc.tf` and add the following code:

```hcl
provider "aws" {
  region     = "us-east-1"
}

# Create VPC
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"

  tags = {
    Name = "MyVPC"
  }
}

# Create Subnet
resource "aws_subnet" "my_subnet" {
  vpc_id                  = aws_vpc.my_vpc.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true

  tags = {
    Name = "MySubnet"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "my_igw" {
  vpc_id = aws_vpc.my_vpc.id

  tags = {
    Name = "MyIGW"
  }
}

# Create Route Table and Associate IGW
resource "aws_route_table" "my_route_table" {
  vpc_id = aws_vpc.my_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.my_igw.id
  }

  tags = {
    Name = "MyRouteTable"
  }
}

resource "aws_route_table_association" "my_rta" {
  subnet_id      = aws_subnet.my_subnet.id
  route_table_id = aws_route_table.my_route_table.id
}

# Create Security Group
resource "aws_security_group" "my_sg" {
  vpc_id = aws_vpc.my_vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "MySG"
  }
}

# Create Key Pair
resource "aws_key_pair" "my_key" {
  key_name   = "Rhohit" #== your private key
  public_key = file("${path.module}/Rhohit.pub")
}

# Create EC2 Instance
resource "aws_instance" "my_instance" {
  ami                    = "ami-04b4f1a9cf54c11d0"
  instance_type          = "t2.micro"
  subnet_id              = aws_subnet.my_subnet.id
  vpc_security_group_ids = [aws_security_group.my_sg.id]
  key_name               = aws_key_pair.my_key.key_name

  tags = {
    Name = "MyEC2Instance"
  }
}
```

## **Step 4: Create an SSH Key Pair**

Run the following command inside the `demo` directory to generate a key pair:

```bash
ssh-keygen -t rsa -b 2048 -f Rhohit
```

This will generate `Rhohit` (private key) and `Rhohit.pub` (public key) files.

## **Step 5: Apply Terraform Commands**

1. **Initialize Terraform:**
   ```bash
   terraform init
   ```
2. **Validate the configuration:**
   ```bash
   terraform validate
   ```
3. **Preview the changes:**
   ```bash
   terraform plan
   ```
4. **Apply the configuration:**
   ```bash
   terraform apply -auto-approve
   ```

Once the process is complete, your AWS VPC, Subnet, IGW, Security Group, and EC2 instance will be created successfully. ðŸš€
this is the url of this project====
  https://chatgpt.com/canvas/shared/67c6ef9da55c81918c7ce3ceea5da327
